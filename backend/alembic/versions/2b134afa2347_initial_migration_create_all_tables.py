"""Initial migration - create all tables

Revision ID: 2b134afa2347
Revises: 
Create Date: 2025-09-23 21:37:59.880251

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2b134afa2347'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dailyquest',
    sa.Column('quest_id', sa.Integer(), nullable=False),
    sa.Column('quest_type', postgresql.ENUM('daily_login', 'feed_pet', 'earn_xp', name='questtypeenum'), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('xp_reward', sa.Integer(), nullable=False),
    sa.Column('additional_rewards', sa.JSON(), nullable=True),
    sa.Column('target_count', sa.Integer(), nullable=False),
    sa.Column('criteria', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('difficulty_level', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('quest_id')
    )
    op.create_index(op.f('ix_dailyquest_quest_id'), 'dailyquest', ['quest_id'], unique=False)
    op.create_table('moodle_config',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base_url', sa.String(), nullable=True),
    sa.Column('service_name', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_moodle_config_id'), 'moodle_config', ['id'], unique=False)
    op.create_table('streak',
    sa.Column('streak_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('streak_type', sa.String(length=50), nullable=False),
    sa.Column('current_streak', sa.Integer(), nullable=False),
    sa.Column('longest_streak', sa.Integer(), nullable=False),
    sa.Column('last_activity_date', sa.Date(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.PrimaryKeyConstraint('streak_id'),
    sa.UniqueConstraint('user_id', 'streak_type', name='uq_user_streak')
    )
    op.create_index(op.f('ix_streak_streak_id'), 'streak', ['streak_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('profile_image_url', sa.Text(), nullable=True),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('moodle_user_id', sa.Integer(), nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=True),
    sa.Column('user_token', sa.Text(), nullable=True),
    sa.CheckConstraint("role IN ('student', 'teacher', 'admin')", name='users_role_check'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('user_token'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('activity_logs',
    sa.Column('log_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.String(length=50), nullable=False),
    sa.Column('action_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('related_entity_type', sa.String(length=50), nullable=True),
    sa.Column('related_entity_id', sa.Integer(), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('exp_change', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table('badges',
    sa.Column('badge_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('badge_type', sa.String(length=50), nullable=False),
    sa.Column('image_url', sa.Text(), nullable=True),
    sa.Column('criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('exp_value', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('badge_id')
    )
    op.create_index(op.f('ix_badges_badge_id'), 'badges', ['badge_id'], unique=False)
    op.create_table('courses',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('course_code', sa.String(length=50), nullable=True),
    sa.Column('teacher_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=True),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('moodle_course_id', sa.Integer(), nullable=True),
    sa.Column('enrollment_key', sa.String(length=100), nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('short_name', sa.String(length=50), nullable=True),
    sa.Column('format', sa.String(length=50), nullable=True),
    sa.Column('visible', sa.Boolean(), nullable=True),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.Column('last_synced_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['teacher_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('course_code'),
    sa.UniqueConstraint('moodle_course_id')
    )
    op.create_index(op.f('ix_courses_id'), 'courses', ['id'], unique=False)
    op.create_table('tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('token_type', sa.String(), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('revoked', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tokens_id'), 'tokens', ['id'], unique=False)
    op.create_index(op.f('ix_tokens_token'), 'tokens', ['token'], unique=True)
    op.create_table('userdailyquest',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('daily_quest_id', sa.Integer(), nullable=False),
    sa.Column('assigned_date', sa.DateTime(), nullable=True),
    sa.Column('quest_date', sa.DateTime(), nullable=False),
    sa.Column('status', postgresql.ENUM('available', 'active', 'completed', 'expired', name='queststatusenum'), nullable=False),
    sa.Column('current_progress', sa.Integer(), nullable=False),
    sa.Column('target_progress', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('xp_awarded', sa.Integer(), nullable=False),
    sa.Column('rewards_claimed', sa.Boolean(), nullable=True),
    sa.Column('quest_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['daily_quest_id'], ['dailyquest.quest_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_userdailyquest_id'), 'userdailyquest', ['id'], unique=False)
    op.create_table('course_enrollments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('moodle_enrollment_id', sa.Integer(), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('last_access', sa.DateTime(timezone=True), nullable=True),
    sa.Column('time_created', sa.DateTime(timezone=True), nullable=True),
    sa.Column('time_modified', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_course_enrollments_id'), 'course_enrollments', ['id'], unique=False)
    op.create_table('dailyquestprogress',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_daily_quest_id', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.String(length=50), nullable=False),
    sa.Column('action_data', sa.JSON(), nullable=True),
    sa.Column('progress_increment', sa.Integer(), nullable=False),
    sa.Column('recorded_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_daily_quest_id'], ['userdailyquest.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dailyquestprogress_id'), 'dailyquestprogress', ['id'], unique=False)
    op.create_table('experience_points',
    sa.Column('exp_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('source_type', sa.String(length=50), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=True),
    sa.Column('awarded_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('awarded_by', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['awarded_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('exp_id')
    )
    op.create_table('leaderboards',
    sa.Column('leaderboard_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('metric_type', sa.String(length=50), nullable=False),
    sa.Column('timeframe', sa.String(length=20), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.PrimaryKeyConstraint('leaderboard_id')
    )
    op.create_table('quests',
    sa.Column('quest_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.Column('creator_id', sa.Integer(), nullable=False),
    sa.Column('exp_reward', sa.Integer(), nullable=False),
    sa.Column('quest_type', sa.String(length=20), nullable=False),
    sa.Column('validation_method', sa.String(length=50), nullable=False),
    sa.Column('validation_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('difficulty_level', sa.SmallInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_updated', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('moodle_activity_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('quest_id')
    )
    op.create_index(op.f('ix_quests_moodle_activity_id'), 'quests', ['moodle_activity_id'], unique=False)
    op.create_index(op.f('ix_quests_quest_id'), 'quests', ['quest_id'], unique=False)
    op.create_table('student_progress',
    sa.Column('progress_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('total_exp', sa.Integer(), nullable=False),
    sa.Column('quests_completed', sa.Integer(), nullable=False),
    sa.Column('badges_earned', sa.Integer(), nullable=False),
    sa.Column('engagement_score', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('study_hours', sa.DECIMAL(precision=8, scale=2), nullable=False),
    sa.Column('last_activity', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('streak_days', sa.Integer(), nullable=False),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('progress_id')
    )
    op.create_table('user_badges',
    sa.Column('user_badge_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('badge_id', sa.Integer(), nullable=False),
    sa.Column('awarded_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('awarded_by', sa.Integer(), nullable=True),
    sa.Column('course_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['awarded_by'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['badge_id'], ['badges.badge_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_badge_id')
    )
    op.create_index(op.f('ix_user_badges_badge_id'), 'user_badges', ['badge_id'], unique=False)
    op.create_index(op.f('ix_user_badges_course_id'), 'user_badges', ['course_id'], unique=False)
    op.create_index(op.f('ix_user_badges_user_badge_id'), 'user_badges', ['user_badge_id'], unique=False)
    op.create_index(op.f('ix_user_badges_user_id'), 'user_badges', ['user_id'], unique=False)
    op.create_table('leaderboard_entries',
    sa.Column('entry_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('leaderboard_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('score', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('rank', sa.Integer(), nullable=True),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['leaderboard_id'], ['leaderboards.leaderboard_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('entry_id')
    )
    op.create_table('quest_progress',
    sa.Column('progress_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('quest_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('progress_percent', sa.SmallInteger(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['quest_id'], ['quests.quest_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('progress_id'),
    sa.UniqueConstraint('user_id', 'quest_id', name='uq_user_quest')
    )
    op.create_index(op.f('ix_quest_progress_progress_id'), 'quest_progress', ['progress_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_quest_progress_progress_id'), table_name='quest_progress')
    op.drop_table('quest_progress')
    op.drop_table('leaderboard_entries')
    op.drop_index(op.f('ix_user_badges_user_id'), table_name='user_badges')
    op.drop_index(op.f('ix_user_badges_user_badge_id'), table_name='user_badges')
    op.drop_index(op.f('ix_user_badges_course_id'), table_name='user_badges')
    op.drop_index(op.f('ix_user_badges_badge_id'), table_name='user_badges')
    op.drop_table('user_badges')
    op.drop_table('student_progress')
    op.drop_index(op.f('ix_quests_quest_id'), table_name='quests')
    op.drop_index(op.f('ix_quests_moodle_activity_id'), table_name='quests')
    op.drop_table('quests')
    op.drop_table('leaderboards')
    op.drop_table('experience_points')
    op.drop_index(op.f('ix_dailyquestprogress_id'), table_name='dailyquestprogress')
    op.drop_table('dailyquestprogress')
    op.drop_index(op.f('ix_course_enrollments_id'), table_name='course_enrollments')
    op.drop_table('course_enrollments')
    op.drop_index(op.f('ix_userdailyquest_id'), table_name='userdailyquest')
    op.drop_table('userdailyquest')
    op.drop_index(op.f('ix_tokens_token'), table_name='tokens')
    op.drop_index(op.f('ix_tokens_id'), table_name='tokens')
    op.drop_table('tokens')
    op.drop_index(op.f('ix_courses_id'), table_name='courses')
    op.drop_table('courses')
    op.drop_index(op.f('ix_badges_badge_id'), table_name='badges')
    op.drop_table('badges')
    op.drop_table('activity_logs')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_streak_streak_id'), table_name='streak')
    op.drop_table('streak')
    op.drop_index(op.f('ix_moodle_config_id'), table_name='moodle_config')
    op.drop_table('moodle_config')
    op.drop_index(op.f('ix_dailyquest_quest_id'), table_name='dailyquest')
    op.drop_table('dailyquest')
    
    # Drop enum types
    op.execute(sa.text("DROP TYPE IF EXISTS queststatusenum CASCADE"))
    op.execute(sa.text("DROP TYPE IF EXISTS questtypeenum CASCADE"))
    # ### end Alembic commands ###
